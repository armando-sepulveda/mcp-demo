package mx.regional.next.automotive.credit.infrastructure.mcp.tools;

import mx.regional.next.automotive.credit.application.ports.in.GetCreditStatusUseCase;
import mx.regional.next.automotive.credit.application.dto.CreditStatusResponse;
import mx.regional.next.automotive.credit.domain.enums.CreditStatus;

import org.springframework.ai.tool.annotation.Tool;
import org.springframework.ai.tool.annotation.ToolParam;
import org.springframework.stereotype.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.format.DateTimeFormatter;
import java.util.UUID;

@Component
public class GetCreditApplicationStatusTool {
    
    private static final Logger log = LoggerFactory.getLogger(GetCreditApplicationStatusTool.class);
    
    private final GetCreditStatusUseCase getCreditStatusUseCase;
    
    public GetCreditApplicationStatusTool(GetCreditStatusUseCase getCreditStatusUseCase) {
        this.getCreditStatusUseCase = getCreditStatusUseCase;
    }
    
    @Tool(name = "get_credit_application_status", 
          description = "Consulta el estado actual de una solicitud de cr√©dito automotriz por su ID.")
    public String getCreditApplicationStatus(
            @ToolParam(description = "ID de la solicitud de cr√©dito - OBLIGATORIO", required = true) 
            String applicationId) {
        
        try {
            log.info("Consultando estado de solicitud v√≠a MCP: {}", applicationId);
            
            // Validar formato del ID
            if (applicationId == null || applicationId.trim().isEmpty()) {
                return "‚ùå **Error:** ID de solicitud requerido.";
            }
            
            UUID uuid;
            try {
                uuid = UUID.fromString(applicationId.trim());
            } catch (IllegalArgumentException e) {
                return "‚ùå **Error:** Formato de ID inv√°lido. Debe ser un UUID v√°lido.";
            }
            
            CreditStatusResponse response = getCreditStatusUseCase.getCreditStatus(uuid);
            
            return formatStatusResponse(response);
            
        } catch (Exception e) {
            log.error("Error consultando estado de solicitud v√≠a MCP", e);
            return formatErrorResponse(e.getMessage());
        }
    }
    
    @Tool(name = "get_credit_status_by_document", 
          description = "Consulta el estado de solicitudes de cr√©dito por n√∫mero de documento del cliente.")
    public String getCreditStatusByDocument(
            @ToolParam(description = "N√∫mero de documento del cliente - OBLIGATORIO", required = true) 
            String customerDocument) {
        
        try {
            log.info("Consultando estado de solicitudes por documento v√≠a MCP: {}", customerDocument);
            
            if (customerDocument == null || customerDocument.trim().isEmpty()) {
                return "‚ùå **Error:** N√∫mero de documento requerido.";
            }
            
            // En una implementaci√≥n real, esto consultar√≠a m√∫ltiples solicitudes
            var applications = getCreditStatusUseCase.getCreditStatusByCustomerDocument(customerDocument.trim());
            
            return formatMultipleStatusResponse(applications, customerDocument);
            
        } catch (Exception e) {
            log.error("Error consultando solicitudes por documento v√≠a MCP", e);
            return formatErrorResponse(e.getMessage());
        }
    }
    
    @Tool(name = "get_credit_status_summary", 
          description = "Obtiene un resumen de todos los estados posibles de solicitudes de cr√©dito.")
    public String getCreditStatusSummary() {
        try {
            return """
                üìä **ESTADOS DE SOLICITUDES DE CR√âDITO**
                
                ## üîÑ Estados Disponibles
                
                ### üìù **PENDIENTE**
                - Solicitud recibida y en proceso de revisi√≥n inicial
                - Documentos siendo validados
                - Tiempo estimado: 1-2 d√≠as h√°biles
                
                ### üîç **EN_EVALUACION**
                - Documentos validados correctamente
                - An√°lisis crediticio en progreso
                - Verificaci√≥n de informaci√≥n del cliente y veh√≠culo
                - Tiempo estimado: 2-3 d√≠as h√°biles
                
                ### üë• **EN_COMITE**
                - Evaluaci√≥n completada
                - Esperando decisi√≥n del comit√© de cr√©dito
                - Revisi√≥n final de riesgo y condiciones
                - Tiempo estimado: 1-2 d√≠as h√°biles
                
                ### ‚úÖ **APROBADA**
                - Solicitud aprobada por el comit√©
                - Condiciones de cr√©dito definidas
                - Lista para firma de contrato
                
                ### ‚ùå **RECHAZADA**
                - Solicitud no cumple criterios de aprobaci√≥n
                - Razones espec√≠ficas proporcionadas al cliente
                - Posibilidad de nueva solicitud despu√©s de 3 meses
                
                ### üìã **DOCUMENTACION_PENDIENTE**
                - Faltan documentos o informaci√≥n
                - Cliente debe completar requisitos
                - Solicitud pausada hasta completar documentaci√≥n
                
                ### ‚è∏Ô∏è **SUSPENDIDA**
                - Proceso temporalmente detenido
                - Requiere aclaraci√≥n de informaci√≥n
                - Puede reactivarse una vez resueltos los pendientes
                
                ### üí∞ **DESEMBOLSADA**
                - Cr√©dito aprobado y dinero entregado
                - Proceso completado exitosamente
                - Inicio del per√≠odo de pagos
                
                ### üö´ **CANCELADA**
                - Solicitud cancelada por el cliente
                - Proceso terminado sin desembolso
                
                ## üìû Consultas Adicionales
                Para consultas espec√≠ficas sobre su solicitud, use:
                - `get_credit_application_status` con el ID de solicitud
                - `get_credit_status_by_document` con su n√∫mero de documento
                """;
                
        } catch (Exception e) {
            log.error("Error obteniendo resumen de estados", e);
            return formatErrorResponse(e.getMessage());
        }
    }
    
    private String formatStatusResponse(CreditStatusResponse response) {
        StringBuilder result = new StringBuilder();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        
        result.append("üìã **ESTADO DE SOLICITUD DE CR√âDITO**\n\n");
        result.append("üÜî **ID de Solicitud:** ").append(response.getApplicationId()).append("\n");
        result.append("üë§ **Cliente:** ").append(response.getCustomerDocument()).append("\n");
        result.append("üìÖ **Fecha de Solicitud:** ").append(response.getApplicationDate().format(formatter)).append("\n");
        
        // Estado actual con emoji
        String statusEmoji = getStatusEmoji(response.getStatus());
        result.append("üìä **Estado Actual:** ").append(statusEmoji).append(" ").append(response.getStatus().getDisplayName()).append("\n");
        
        if (response.getLastUpdate() != null) {
            result.append("üîÑ **√öltima Actualizaci√≥n:** ").append(response.getLastUpdate().format(formatter)).append("\n");
        }
        
        result.append("\n");
        
        // Informaci√≥n espec√≠fica seg√∫n el estado
        switch (response.getStatus()) {
            case APROBADA:
                result.append("üéâ **¬°FELICITACIONES! CR√âDITO APROBADO**\n\n");
                if (response.getApprovedAmount() != null) {
                    result.append("üí∞ **Monto Aprobado:** $").append(String.format("%,.0f", response.getApprovedAmount())).append("\n");
                }
                if (response.getInterestRate() != null) {
                    result.append("üìà **Tasa de Inter√©s:** ").append(response.getInterestRate()).append("% EA\n");
                }
                result.append("üìù **Pr√≥ximos Pasos:**\n");
                result.append("1. Firma del contrato de cr√©dito\n");
                result.append("2. Presentaci√≥n de documentos originales\n");
                result.append("3. Programaci√≥n de desembolso\n");
                break;
                
            case RECHAZADA:
                result.append("‚ùå **SOLICITUD RECHAZADA**\n\n");
                if (response.getRejectionReason() != null) {
                    result.append("üìã **Motivo:** ").append(response.getRejectionReason()).append("\n");
                }
                result.append("üí° **Opciones Disponibles:**\n");
                result.append("- Mejorar perfil crediticio y volver a aplicar en 3 meses\n");
                result.append("- Considerar un codeudor\n");
                result.append("- Evaluar un monto menor\n");
                break;
                
            case EN_EVALUACION:
                result.append("üîç **EVALUACI√ìN EN PROGRESO**\n\n");
                result.append("üìã **Proceso Actual:** An√°lisis crediticio y verificaci√≥n de informaci√≥n\n");
                result.append("‚è∞ **Tiempo Estimado:** 2-3 d√≠as h√°biles adicionales\n");
                result.append("üìû **Contacto:** Nos comunicaremos si necesitamos informaci√≥n adicional\n");
                break;
                
            case DOCUMENTACION_PENDIENTE:
                result.append("üìÑ **DOCUMENTACI√ìN PENDIENTE**\n\n");
                if (response.getPendingDocuments() != null && !response.getPendingDocuments().isEmpty()) {
                    result.append("üìã **Documentos Faltantes:**\n");
                    response.getPendingDocuments().forEach(doc -> 
                        result.append("‚Ä¢ ").append(doc).append("\n"));
                }
                result.append("‚ö†Ô∏è **Acci√≥n Requerida:** Enviar documentos pendientes para continuar el proceso\n");
                break;
                
            default:
                result.append("üìä **Estado:** ").append(response.getStatus().getDisplayName()).append("\n");
                result.append("‚è∞ **Proceso en curso** - Le mantendremos informado de cualquier novedad\n");
        }
        
        if (response.getComments() != null && !response.getComments().trim().isEmpty()) {
            result.append("\nüìù **Comentarios Adicionales:**\n");
            result.append(response.getComments()).append("\n");
        }
        
        return result.toString();
    }
    
    private String formatMultipleStatusResponse(java.util.List<CreditStatusResponse> applications, String customerDocument) {
        if (applications.isEmpty()) {
            return String.format("""
                üìã **CONSULTA DE SOLICITUDES**
                
                üë§ **Cliente:** %s
                
                ‚ÑπÔ∏è **Resultado:** No se encontraron solicitudes de cr√©dito para este documento.
                
                üí° **¬øDesea iniciar una nueva solicitud?**
                Use la herramienta `process_credit_application` para crear una nueva solicitud.
                """, customerDocument);
        }
        
        StringBuilder result = new StringBuilder();
        result.append("üìã **SOLICITUDES DE CR√âDITO ENCONTRADAS**\n\n");
        result.append("üë§ **Cliente:** ").append(customerDocument).append("\n");
        result.append("üìä **Total de Solicitudes:** ").append(applications.size()).append("\n\n");
        
        for (int i = 0; i < applications.size(); i++) {
            CreditStatusResponse app = applications.get(i);
            String statusEmoji = getStatusEmoji(app.getStatus());
            
            result.append("### ").append(i + 1).append(". Solicitud ").append(app.getApplicationId()).append("\n");
            result.append("üìÖ **Fecha:** ").append(app.getApplicationDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))).append("\n");
            result.append("üìä **Estado:** ").append(statusEmoji).append(" ").append(app.getStatus().getDisplayName()).append("\n");
            
            if (app.getApprovedAmount() != null) {
                result.append("üí∞ **Monto:** $").append(String.format("%,.0f", app.getApprovedAmount())).append("\n");
            }
            
            result.append("\n");
        }
        
        result.append("üí° **Para detalles espec√≠ficos** use `get_credit_application_status` con el ID de la solicitud de inter√©s.\n");
        
        return result.toString();
    }
    
    private String getStatusEmoji(CreditStatus status) {
        return switch (status) {
            case PENDIENTE -> "üü°";
            case EN_EVALUACION -> "üîç";
            case EN_COMITE -> "üë•";
            case APROBADA -> "‚úÖ";
            case RECHAZADA -> "‚ùå";
            case DOCUMENTACION_PENDIENTE -> "üìÑ";
            case SUSPENDIDA -> "‚è∏Ô∏è";
            case DESEMBOLSADA -> "üí∞";
            case CANCELADA -> "üö´";
        };
    }
    
    private String formatErrorResponse(String errorMessage) {
        return String.format("""
            ‚ö†Ô∏è **ERROR EN CONSULTA DE ESTADO**
            
            ‚ùå **Error:** %s
            
            üîß **Acciones Sugeridas:**
            - Verificar que el ID de solicitud sea correcto
            - Asegurar que el formato del documento sea v√°lido
            - Contactar soporte t√©cnico si el problema persiste
            
            üìû **Soporte:** Para ayuda adicional, contacte nuestro centro de atenci√≥n al cliente
            """, errorMessage);
    }
}