package mx.regional.next.automotive.credit.infrastructure.mcp.tools;

import mx.regional.next.automotive.credit.application.ports.in.ProcessCreditApplicationUseCase;
import mx.regional.next.automotive.credit.application.dto.*;
import mx.regional.next.automotive.credit.infrastructure.mcp.mappers.CreditApplicationMcpMapper;

import org.springframework.ai.tool.annotation.Tool;
import org.springframework.ai.tool.annotation.ToolParam;
import org.springframework.stereotype.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.Locale;

@Component
public class ProcessCreditApplicationTool {
    
    private static final Logger log = LoggerFactory.getLogger(ProcessCreditApplicationTool.class);
    
    private final ProcessCreditApplicationUseCase processCreditApplicationUseCase;
    private final CreditApplicationMcpMapper mapper;
    
    public ProcessCreditApplicationTool(
            ProcessCreditApplicationUseCase processCreditApplicationUseCase,
            CreditApplicationMcpMapper mapper) {
        this.processCreditApplicationUseCase = processCreditApplicationUseCase;
        this.mapper = mapper;
    }
    
    @Tool(name = "process_credit_application", 
          description = "Procesa una nueva solicitud de cr√©dito automotriz. Eval√∫a la elegibilidad del cliente, valida documentos, verifica el veh√≠culo y toma una decisi√≥n crediticia.")
    public String processApplication(
            @ToolParam(description = "N√∫mero de documento del cliente (c√©dula, NIT, etc.) - OBLIGATORIO", required = true) 
            String customerDocument,
            
            @ToolParam(description = "Monto del cr√©dito solicitado en pesos colombianos - OBLIGATORIO", required = true) 
            String requestedAmount,
            
            @ToolParam(description = "VIN del veh√≠culo (17 caracteres) - OBLIGATORIO", required = true) 
            String vehicleVin,
            
            @ToolParam(description = "Marca del veh√≠culo (Toyota, Chevrolet, etc.) - OBLIGATORIO", required = true) 
            String vehicleBrand,
            
            @ToolParam(description = "Modelo del veh√≠culo - OBLIGATORIO", required = true) 
            String vehicleModel,
            
            @ToolParam(description = "A√±o del veh√≠culo (2018 o posterior) - OBLIGATORIO", required = true) 
            String vehicleYear,
            
            @ToolParam(description = "Valor comercial del veh√≠culo en pesos colombianos - OBLIGATORIO", required = true) 
            String vehicleValue,
            
            @ToolParam(description = "Kilometraje del veh√≠culo (m√°ximo 100,000 km) - OBLIGATORIO", required = true) 
            String vehicleKilometers,
            
            @ToolParam(description = "Documentos del cliente en formato JSON (opcional para simulaci√≥n inicial)", required = false) 
            String documentsJson) {
        
        try {
            log.info("Procesando solicitud de cr√©dito v√≠a MCP para cliente: {}", customerDocument);
            
            // Mapear par√°metros a DTO de aplicaci√≥n
            CreditApplicationRequest request = mapper.mapToApplicationRequest(
                customerDocument, requestedAmount, vehicleVin, vehicleBrand, 
                vehicleModel, vehicleYear, vehicleValue, vehicleKilometers, documentsJson
            );
            
            // Procesar aplicaci√≥n
            CreditApplicationResponse response = processCreditApplicationUseCase.processApplication(request);
            
            // Formatear respuesta para el agente de IA
            return formatResponseForAgent(response);
            
        } catch (Exception e) {
            log.error("Error procesando solicitud de cr√©dito v√≠a MCP", e);
            return formatErrorResponse(e.getMessage());
        }
    }
    
    private String formatResponseForAgent(CreditApplicationResponse response) {
        StringBuilder result = new StringBuilder();
        
        result.append("üìã **RESULTADO DE SOLICITUD DE CR√âDITO AUTOMOTRIZ**\\n\\n");
        result.append("üÜî **ID de Solicitud:** ").append(response.getApplicationId()).append("\\n");
        result.append("üìä **Estado:** ").append(response.getStatus().getDisplayName()).append("\\n");
        
        if (response.isApproved()) {
            result.append("‚úÖ **SOLICITUD APROBADA**\\n\\n");
            result.append("üí∞ **Monto Aprobado:** $").append(formatCurrency(response.getApprovedAmount())).append("\\n");
            result.append("üìà **Score Crediticio:** ").append(response.getCreditScore()).append("\\n");
            result.append("‚è∞ **Plazo M√°ximo:** 60 meses\\n");
            result.append("üéØ **Tasa de Inter√©s:** ").append(formatPercentage(response.getInterestRate())).append("% anual\\n");
            result.append("\\nüìù **Pr√≥ximos Pasos:**\\n");
            result.append("1. El cliente debe firmar el contrato de cr√©dito\\n");
            result.append("2. Presentar los documentos originales para verificaci√≥n\\n");
            result.append("3. Programar cita para desembolso\\n");
            
        } else {
            result.append("‚ùå **SOLICITUD RECHAZADA**\\n\\n");
            result.append("üìã **Motivo:** ").append(response.getRejectionReason()).append("\\n");
            result.append("\\nüí° **Recomendaciones:**\\n");
            result.append("- Revisar historial crediticio\\n");
            result.append("- Considerar un monto menor\\n");
            result.append("- A√±adir un codeudor si es necesario\\n");
        }
        
        return result.toString();
    }
    
    @Tool(name = "calculate_monthly_installment", 
          description = "Calcula la cuota mensual estimada de un cr√©dito automotriz basado en monto, tasa y plazo.")
    public String calculateMonthlyInstallment(
            @ToolParam(description = "Monto del cr√©dito en pesos colombianos - OBLIGATORIO", required = true) 
            String loanAmount,
            
            @ToolParam(description = "Tasa de inter√©s anual en porcentaje (ej: 15.5) - OBLIGATORIO", required = true) 
            String annualInterestRate,
            
            @ToolParam(description = "Plazo en meses (12-84) - OBLIGATORIO", required = true) 
            String termInMonths,
            
            @ToolParam(description = "Tipo de cliente para aplicar descuentos (natural/juridica)", required = false) 
            String customerType) {
        
        try {
            log.info("Calculando cuota mensual v√≠a MCP: monto={}, tasa={}, plazo={}, tipo={}", 
                     loanAmount, annualInterestRate, termInMonths, customerType);
            
            // Convertir par√°metros
            BigDecimal amount = new BigDecimal(loanAmount);
            BigDecimal rate = new BigDecimal(annualInterestRate).divide(BigDecimal.valueOf(100), 6, BigDecimal.ROUND_HALF_UP);
            int months = Integer.parseInt(termInMonths);
            
            // Validaciones b√°sicas
            if (amount.compareTo(BigDecimal.valueOf(50000)) < 0) {
                return "‚ùå **Error:** El monto m√≠nimo del cr√©dito es $50,000";
            }
            if (amount.compareTo(BigDecimal.valueOf(2000000000)) > 0) {
                return "‚ùå **Error:** El monto m√°ximo del cr√©dito es $2,000,000,000";
            }
            if (months < 12 || months > 84) {
                return "‚ùå **Error:** El plazo debe estar entre 12 y 84 meses";
            }
            if (rate.compareTo(BigDecimal.valueOf(0.05)) < 0 || rate.compareTo(BigDecimal.valueOf(0.35)) > 0) {
                return "‚ùå **Error:** La tasa de inter√©s debe estar entre 5% y 35% anual";
            }
            
            // Aplicar descuento por tipo de cliente (opcional)
            BigDecimal finalRate = rate;
            String discountInfo = "";
            if (customerType != null && !customerType.trim().isEmpty()) {
                if ("juridica".equalsIgnoreCase(customerType.trim())) {
                    finalRate = rate.multiply(BigDecimal.valueOf(0.95)); // 5% descuento para personas jur√≠dicas
                    discountInfo = "\nüéÅ **Descuento aplicado:** 5% para persona jur√≠dica";
                }
            }
            
            // C√°lculo de cuota mensual usando f√≥rmula de amortizaci√≥n
            BigDecimal monthlyRate = finalRate.divide(BigDecimal.valueOf(12), 6, BigDecimal.ROUND_HALF_UP);
            BigDecimal onePlusR = BigDecimal.ONE.add(monthlyRate);
            BigDecimal onePlusRPowN = onePlusR.pow(months);
            
            BigDecimal numerator = amount.multiply(monthlyRate).multiply(onePlusRPowN);
            BigDecimal denominator = onePlusRPowN.subtract(BigDecimal.ONE);
            BigDecimal monthlyPayment = numerator.divide(denominator, 2, BigDecimal.ROUND_HALF_UP);
            
            BigDecimal totalPayment = monthlyPayment.multiply(BigDecimal.valueOf(months));
            BigDecimal totalInterest = totalPayment.subtract(amount);
            
            return String.format("""
                üí∞ **SIMULACI√ìN DE CUOTA MENSUAL**
                
                üìä **Datos del Cr√©dito:**
                ‚Ä¢ Monto solicitado: %s
                ‚Ä¢ Tasa de inter√©s: %.2f%% EA%s
                ‚Ä¢ Plazo: %d meses (%.1f a√±os)
                
                üíµ **Resultado de Simulaci√≥n:**
                ‚Ä¢ **Cuota mensual: %s**
                ‚Ä¢ Total a pagar: %s
                ‚Ä¢ Total intereses: %s
                
                üìà **Informaci√≥n Adicional:**
                ‚Ä¢ Costo financiero: %.1f%% del monto
                ‚Ä¢ Capacidad de pago requerida: %s mensual m√≠nimo
                
                ‚ö†Ô∏è *Simulaci√≥n referencial. Tasas sujetas a aprobaci√≥n crediticia final.*
                """,
                formatCurrency(amount),
                finalRate.multiply(BigDecimal.valueOf(100)),
                discountInfo,
                months,
                months / 12.0,
                formatCurrency(monthlyPayment),
                formatCurrency(totalPayment),
                formatCurrency(totalInterest),
                totalInterest.divide(amount, 4, BigDecimal.ROUND_HALF_UP).multiply(BigDecimal.valueOf(100)),
                formatCurrency(monthlyPayment.divide(BigDecimal.valueOf(0.30), 0, BigDecimal.ROUND_UP))
            );
            
        } catch (NumberFormatException e) {
            log.error("Error de formato en par√°metros num√©ricos", e);
            return "‚ùå **Error:** Formato inv√°lido en los n√∫meros. Verifique que el monto, tasa y plazo sean n√∫meros v√°lidos.";
        } catch (Exception e) {
            log.error("Error calculando cuota mensual v√≠a MCP", e);
            return "‚ùå **Error inesperado:** " + e.getMessage();
        }
    }
    
    private String formatErrorResponse(String errorMessage) {
        return String.format("""
            ‚ö†Ô∏è **ERROR EN PROCESAMIENTO**
            
            ‚ùå **Error:** %s
            
            üîß **Acci√≥n Requerida:**
            - Verificar que todos los datos est√©n correctos
            - Contactar soporte t√©cnico si el problema persiste
            """, errorMessage);
    }
    
    private String formatCurrency(BigDecimal amount) {
        if (amount == null) return "N/A";
        return NumberFormat.getCurrencyInstance(new Locale("es", "CO")).format(amount);
    }
    
    private String formatPercentage(BigDecimal percentage) {
        if (percentage == null) return "N/A";
        return percentage.multiply(BigDecimal.valueOf(100)).setScale(2, BigDecimal.ROUND_HALF_UP).toString();
    }
}