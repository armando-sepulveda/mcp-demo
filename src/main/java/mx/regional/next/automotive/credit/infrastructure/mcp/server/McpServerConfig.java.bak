package mx.regional.next.automotive.credit.infrastructure.mcp.server;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.time.Duration;
import java.util.List;
import java.util.Map;

@Configuration
@ConfigurationProperties(prefix = "mcp.server")
public class McpServerConfig {
    
    private static final Logger log = LoggerFactory.getLogger(McpServerConfig.class);
    
    @NotBlank
    private String name = "automotive-credit-mcp-server";
    
    @NotBlank
    private String version = "1.0.0";
    
    @NotBlank
    private String description = "Servidor MCP para gestión de créditos automotrices con Spring AI";
    
    @Min(1)
    private int port = 8080;
    
    @NotNull
    private Duration timeout = Duration.ofMinutes(5);
    
    @Min(1)
    private int maxConcurrentRequests = 100;
    
    private boolean enableMetrics = true;
    private boolean enableHealthCheck = true;
    private boolean enableSecurity = false;
    private boolean enableCors = true;
    
    // Configuración de herramientas MCP
    private ToolsConfig tools = new ToolsConfig();
    
    // Configuración de recursos MCP
    private ResourcesConfig resources = new ResourcesConfig();
    
    // Configuración de prompts MCP
    private PromptsConfig prompts = new PromptsConfig();
    
    // Configuración de logging específico para MCP
    private LoggingConfig logging = new LoggingConfig();
    
    @Bean
    @Profile("!test")
    public McpServerProperties mcpServerProperties() {
        log.info("Configurando propiedades del servidor MCP: {}", name);
        log.info("Puerto configurado: {}", port);
        log.info("Timeout configurado: {}", timeout);
        log.info("Máximo requests concurrentes: {}", maxConcurrentRequests);
        
        McpServerProperties properties = new McpServerProperties();
        properties.setName(name);
        properties.setVersion(version);
        properties.setDescription(description);
        properties.setPort(port);
        properties.setTimeout(timeout);
        properties.setMaxConcurrentRequests(maxConcurrentRequests);
        properties.setEnableMetrics(enableMetrics);
        properties.setEnableHealthCheck(enableHealthCheck);
        properties.setEnableSecurity(enableSecurity);
        properties.setEnableCors(enableCors);
        properties.setTools(tools);
        properties.setResources(resources);
        properties.setPrompts(prompts);
        properties.setLogging(logging);
        
        return properties;
    }
    
    @Bean
    public McpServerMetricsConfig metricsConfig() {
        McpServerMetricsConfig config = new McpServerMetricsConfig();
        config.setEnabled(enableMetrics);
        config.setIncludeRequestMetrics(true);
        config.setIncludeToolMetrics(true);
        config.setIncludeResourceMetrics(true);
        config.setIncludeSystemMetrics(true);
        
        return config;
    }
    
    // Getters y Setters
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getVersion() { return version; }
    public void setVersion(String version) { this.version = version; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    public int getPort() { return port; }
    public void setPort(int port) { this.port = port; }
    
    public Duration getTimeout() { return timeout; }
    public void setTimeout(Duration timeout) { this.timeout = timeout; }
    
    public int getMaxConcurrentRequests() { return maxConcurrentRequests; }
    public void setMaxConcurrentRequests(int maxConcurrentRequests) { this.maxConcurrentRequests = maxConcurrentRequests; }
    
    public boolean isEnableMetrics() { return enableMetrics; }
    public void setEnableMetrics(boolean enableMetrics) { this.enableMetrics = enableMetrics; }
    
    public boolean isEnableHealthCheck() { return enableHealthCheck; }
    public void setEnableHealthCheck(boolean enableHealthCheck) { this.enableHealthCheck = enableHealthCheck; }
    
    public boolean isEnableSecurity() { return enableSecurity; }
    public void setEnableSecurity(boolean enableSecurity) { this.enableSecurity = enableSecurity; }
    
    public boolean isEnableCors() { return enableCors; }
    public void setEnableCors(boolean enableCors) { this.enableCors = enableCors; }
    
    public ToolsConfig getTools() { return tools; }
    public void setTools(ToolsConfig tools) { this.tools = tools; }
    
    public ResourcesConfig getResources() { return resources; }
    public void setResources(ResourcesConfig resources) { this.resources = resources; }
    
    public PromptsConfig getPrompts() { return prompts; }
    public void setPrompts(PromptsConfig prompts) { this.prompts = prompts; }
    
    public LoggingConfig getLogging() { return logging; }
    public void setLogging(LoggingConfig logging) { this.logging = logging; }
    
    // Clases de configuración anidadas
    public static class ToolsConfig {
        private boolean enableValidation = true;
        private Duration defaultTimeout = Duration.ofMinutes(2);
        private int maxRetries = 3;
        private List<String> enabledTools = List.of(
            "process_credit_application",
            "validate_customer_documents",
            "check_vehicle_eligibility", 
            "get_credit_application_status",
            "calculate_monthly_installment"
        );
        
        // Getters y Setters
        public boolean isEnableValidation() { return enableValidation; }
        public void setEnableValidation(boolean enableValidation) { this.enableValidation = enableValidation; }
        
        public Duration getDefaultTimeout() { return defaultTimeout; }
        public void setDefaultTimeout(Duration defaultTimeout) { this.defaultTimeout = defaultTimeout; }
        
        public int getMaxRetries() { return maxRetries; }
        public void setMaxRetries(int maxRetries) { this.maxRetries = maxRetries; }
        
        public List<String> getEnabledTools() { return enabledTools; }
        public void setEnabledTools(List<String> enabledTools) { this.enabledTools = enabledTools; }
    }
    
    public static class ResourcesConfig {
        private boolean enableCaching = true;
        private Duration cacheTimeout = Duration.ofMinutes(30);
        private int maxCacheSize = 1000;
        private List<String> enabledResources = List.of(
            "credit://policies",
            "credit://interest-rates",
            "credit://documents/*",
            "credit://eligibility-criteria"
        );
        
        // Getters y Setters
        public boolean isEnableCaching() { return enableCaching; }
        public void setEnableCaching(boolean enableCaching) { this.enableCaching = enableCaching; }
        
        public Duration getCacheTimeout() { return cacheTimeout; }
        public void setCacheTimeout(Duration cacheTimeout) { this.cacheTimeout = cacheTimeout; }
        
        public int getMaxCacheSize() { return maxCacheSize; }
        public void setMaxCacheSize(int maxCacheSize) { this.maxCacheSize = maxCacheSize; }
        
        public List<String> getEnabledResources() { return enabledResources; }
        public void setEnabledResources(List<String> enabledResources) { this.enabledResources = enabledResources; }
    }
    
    public static class PromptsConfig {
        private boolean enableTemplating = true;
        private boolean enablePersonalization = true;
        private List<String> enabledPrompts = List.of(
            "credit_analyst",
            "document_validator",
            "risk_assessment", 
            "customer_service"
        );
        
        // Getters y Setters
        public boolean isEnableTemplating() { return enableTemplating; }
        public void setEnableTemplating(boolean enableTemplating) { this.enableTemplating = enableTemplating; }
        
        public boolean isEnablePersonalization() { return enablePersonalization; }
        public void setEnablePersonalization(boolean enablePersonalization) { this.enablePersonalization = enablePersonalization; }
        
        public List<String> getEnabledPrompts() { return enabledPrompts; }
        public void setEnabledPrompts(List<String> enabledPrompts) { this.enabledPrompts = enabledPrompts; }
    }
    
    public static class LoggingConfig {
        private boolean enableRequestLogging = true;
        private boolean enableResponseLogging = false; // Por privacidad
        private boolean enablePerformanceLogging = true;
        private boolean enableErrorLogging = true;
        private String logLevel = "INFO";
        private List<String> excludePatterns = List.of(
            "/health", "/metrics", "/favicon.ico"
        );
        
        // Getters y Setters
        public boolean isEnableRequestLogging() { return enableRequestLogging; }
        public void setEnableRequestLogging(boolean enableRequestLogging) { this.enableRequestLogging = enableRequestLogging; }
        
        public boolean isEnableResponseLogging() { return enableResponseLogging; }
        public void setEnableResponseLogging(boolean enableResponseLogging) { this.enableResponseLogging = enableResponseLogging; }
        
        public boolean isEnablePerformanceLogging() { return enablePerformanceLogging; }
        public void setEnablePerformanceLogging(boolean enablePerformanceLogging) { this.enablePerformanceLogging = enablePerformanceLogging; }
        
        public boolean isEnableErrorLogging() { return enableErrorLogging; }
        public void setEnableErrorLogging(boolean enableErrorLogging) { this.enableErrorLogging = enableErrorLogging; }
        
        public String getLogLevel() { return logLevel; }
        public void setLogLevel(String logLevel) { this.logLevel = logLevel; }
        
        public List<String> getExcludePatterns() { return excludePatterns; }
        public void setExcludePatterns(List<String> excludePatterns) { this.excludePatterns = excludePatterns; }
    }
    
    // Clase de propiedades del servidor
    public static class McpServerProperties {
        private String name;
        private String version;
        private String description;
        private int port;
        private Duration timeout;
        private int maxConcurrentRequests;
        private boolean enableMetrics;
        private boolean enableHealthCheck;
        private boolean enableSecurity;
        private boolean enableCors;
        private ToolsConfig tools;
        private ResourcesConfig resources;
        private PromptsConfig prompts;
        private LoggingConfig logging;
        
        // Getters y Setters
        public String getName() { return name; }
        public void setName(String name) { this.name = name; }
        
        public String getVersion() { return version; }
        public void setVersion(String version) { this.version = version; }
        
        public String getDescription() { return description; }
        public void setDescription(String description) { this.description = description; }
        
        public int getPort() { return port; }
        public void setPort(int port) { this.port = port; }
        
        public Duration getTimeout() { return timeout; }
        public void setTimeout(Duration timeout) { this.timeout = timeout; }
        
        public int getMaxConcurrentRequests() { return maxConcurrentRequests; }
        public void setMaxConcurrentRequests(int maxConcurrentRequests) { this.maxConcurrentRequests = maxConcurrentRequests; }
        
        public boolean isEnableMetrics() { return enableMetrics; }
        public void setEnableMetrics(boolean enableMetrics) { this.enableMetrics = enableMetrics; }
        
        public boolean isEnableHealthCheck() { return enableHealthCheck; }
        public void setEnableHealthCheck(boolean enableHealthCheck) { this.enableHealthCheck = enableHealthCheck; }
        
        public boolean isEnableSecurity() { return enableSecurity; }
        public void setEnableSecurity(boolean enableSecurity) { this.enableSecurity = enableSecurity; }
        
        public boolean isEnableCors() { return enableCors; }
        public void setEnableCors(boolean enableCors) { this.enableCors = enableCors; }
        
        public ToolsConfig getTools() { return tools; }
        public void setTools(ToolsConfig tools) { this.tools = tools; }
        
        public ResourcesConfig getResources() { return resources; }
        public void setResources(ResourcesConfig resources) { this.resources = resources; }
        
        public PromptsConfig getPrompts() { return prompts; }
        public void setPrompts(PromptsConfig prompts) { this.prompts = prompts; }
        
        public LoggingConfig getLogging() { return logging; }
        public void setLogging(LoggingConfig logging) { this.logging = logging; }
    }
    
    // Configuración de métricas
    public static class McpServerMetricsConfig {
        private boolean enabled;
        private boolean includeRequestMetrics;
        private boolean includeToolMetrics;
        private boolean includeResourceMetrics;
        private boolean includeSystemMetrics;
        
        // Getters y Setters
        public boolean isEnabled() { return enabled; }
        public void setEnabled(boolean enabled) { this.enabled = enabled; }
        
        public boolean isIncludeRequestMetrics() { return includeRequestMetrics; }
        public void setIncludeRequestMetrics(boolean includeRequestMetrics) { this.includeRequestMetrics = includeRequestMetrics; }
        
        public boolean isIncludeToolMetrics() { return includeToolMetrics; }
        public void setIncludeToolMetrics(boolean includeToolMetrics) { this.includeToolMetrics = includeToolMetrics; }
        
        public boolean isIncludeResourceMetrics() { return includeResourceMetrics; }
        public void setIncludeResourceMetrics(boolean includeResourceMetrics) { this.includeResourceMetrics = includeResourceMetrics; }
        
        public boolean isIncludeSystemMetrics() { return includeSystemMetrics; }
        public void setIncludeSystemMetrics(boolean includeSystemMetrics) { this.includeSystemMetrics = includeSystemMetrics; }
    }
}